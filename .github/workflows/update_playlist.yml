name: Update Spotify Playlist

on:
  schedule:
    - cron: "0 0 * * 6" # Runs every Saturday at 00:00 UTC
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write  # Allows pushing changes to the repo

jobs:
  update-playlist:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Prevent hanging
    environment: production # Specify the environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run playlist updater
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_USERNAME: ${{ secrets.SPOTIFY_USERNAME }}
          SOURCE_PLAYLIST: ${{ vars.SOURCE_PLAYLIST }}
          TARGET_PLAYLIST: ${{ vars.TARGET_PLAYLIST }}
          PLAYLIST_DESCRIPTION: ${{ vars.PLAYLIST_DESCRIPTION }}
        run: python main.py || exit 1

      - name: Debug file presence
        run: |
          echo "Directory contents:"
          ls -la
          if [ -f last_update.json ]; then echo "last_update.json exists"; else echo "last_update.json not found"; fi
          if [ -f playlist_record.json ]; then echo "playlist_record.json exists"; else echo "playlist_record.json not found"; fi
          if [ -f priority_songs.json ]; then echo "priority_songs.json exists"; else echo "priority_songs.json not found"; fi

      - name: Commit updated files
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add last_update.json playlist_record.json || echo "No files to add"
          git diff --cached --quiet && echo "No changes to commit" || git commit -m "Update playlist data after sync"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on Telegram
        if: always()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="ðŸŽ¶ *Afrobeats on Rotation* Spotify playlist just got updated! ðŸ”¥\n\nClick below to stream trending music now:\nðŸ‘‰ https://open.spotify.com/playlist/1NacBkTTb3o1WAZIBVDlx8" \
            -d parse_mode=Markdown
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Tweet Playlist Update
        if: always()
        run: |
          python - <<EOF
import os
import tweepy

auth = tweepy.OAuth1UserHandler(
    os.environ["TWITTER_API_KEY"],
    os.environ["TWITTER_API_SECRET"],
    os.environ["TWITTER_ACCESS_TOKEN"],
    os.environ["TWITTER_ACCESS_TOKEN_SECRET"]
)
api = tweepy.API(auth)

tweet = (
    "ðŸŽ§ The *Afrobeats on Rotation* playlist is freshly updated! ðŸ”¥\\n"
    "Stream: https://open.spotify.com/playlist/1NacBkTTb3o1WAZIBVDlx8 "
    "#Afrobeats #SpotifyPlaylist"
)
api.update_status(tweet)
EOF
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: updater-logs
          path: updater.log
